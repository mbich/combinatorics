% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combinatorics.design.add.R
\docType{methods}
\name{combinatorics.add.parameter}
\alias{combinatorics.add.parameter}
\alias{combinatorics.add.parameter,Combinatorics,character,character,numeric,missing-method}
\alias{combinatorics.add.parameter,Combinatorics,character,missing,numeric,missing-method}
\alias{combinatorics.add.parameter,Combinatorics,character,character,missing,missing-method}
\alias{combinatorics.add.parameter,Combinatorics,character,missing,missing,missing-method}
\alias{combinatorics.add.parameter,Combinatorics,character,character,numeric,vector-method}
\alias{combinatorics.add.parameter,Combinatorics,character,character,missing,vector-method}
\alias{combinatorics.add.parameter,Combinatorics,character,missing,numeric,vector-method}
\title{Add parameter in model}
\usage{
combinatorics.add.parameter(model, name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,character,numeric,missing}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,missing,numeric,missing}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,character,missing,missing}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,missing,missing,missing}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,character,numeric,vector}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,character,missing,vector}(model,
  name, dimension, value, arrangementValues)


  \S4method{combinatorics.add.parameter}{Combinatorics,character,missing,numeric,vector}(model,
  name, dimension, value, arrangementValues)
}
\arguments{
\item{model}{Combinatorics model}

\item{name}{parameter name}

\item{dimension}{parameter dimension}

\item{value}{parameter value}

\item{arrangementValues}{numeric vector value all arrangements}
}
\value{
Combintroicsmodel
}
\description{
Add parameter in model.
}
\section{Methods (by class)}{
\itemize{
\item \code{model = Combinatorics,name = character,dimension = character,value = numeric,arrangementValues = missing}: add limit parameter in empty model

\item \code{model = Combinatorics,name = character,dimension = missing,value = numeric,arrangementValues = missing}: add limit parameter in empty model

\item \code{model = Combinatorics,name = character,dimension = character,value = missing,arrangementValues = missing}: add parameter in empty model

\item \code{model = Combinatorics,name = character,dimension = missing,value = missing,arrangementValues = missing}: add parameter in empty model

\item \code{model = Combinatorics,name = character,dimension = character,value = numeric,arrangementValues = vector}: add limit parameter in model

\item \code{model = Combinatorics,name = character,dimension = character,value = missing,arrangementValues = vector}: add parameter in model

\item \code{model = Combinatorics,name = character,dimension = missing,value = numeric,arrangementValues = vector}: add limit parameter in model
}}

\examples{

  model <- combinatorics.model()
  combinatorics.add.parameter (model, "R1", "pc", 10)

  model <- combinatorics.model()
  combinatorics.add.parameter (model, "R1", value=10)

  model <- combinatorics.model()
  combinatorics.add.parameter (model, "R1", "pc.")

  model <- combinatorics.model()
  combinatorics.add.parameter (model, "R1")

  model <- combinatorics.example.Model2()
  combinatorics.add.parameter (model, "Electricity", "Thousand kWh/hour", 75,
     c(39, 24.3, 17.7, 26.7, 11.1, 10.8, 18.3, 12.3))

  model <- combinatorics.example.Model2()
  combinatorics.add.parameter (model, "Electricity", "Thousand kWh/hour",
     arrangementValues=c(39, 24.3, 17.7, 26.7, 11.1, 10.8, 18.3, 12.3))

  model <- combinatorics.example.Model2()
  combinatorics.add.parameter (model, "Electricity", value=75,
     arrangementValues=c(39, 24.3, 17.7, 26.7, 11.1, 10.8, 18.3, 12.3))
}
